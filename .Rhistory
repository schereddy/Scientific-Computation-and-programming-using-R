mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col(fill = "#660099") +
scale_y_continuous(labels = comma_format()) +
coord_flip() +
labs(title = "Common words in reviews ",
subtitle = "For all 13,701 reviews; After stemming and removing stop words",
y = "# of uses")
library(widyr)
library(igraph)
library(ggraph)
review_bigrams <- data1 %>% unnest_tokens(bigram, review_body, token = "ngrams", n = 2)
bigrams_separated <- review_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
bigrams_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigrams_united %>%
count(bigram, sort = TRUE)
bigrams_in_review <- data1 %>% unnest_tokens(bigram, review_body, token = "ngrams", n = 2)
separated_bigrams <- bigrams_in_review %>%
separate(bigram, c("word1", "word2"), sep = " ")
filtered_bigrams <- separated_bigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
count_bigrams <- filtered_bigrams %>%
count(word1, word2, sort = TRUE)
united_bigrams <- filtered_bigrams %>%
unite(bigram, word1, word2, sep = " ")
united_bigrams %>%
count(bigram, sort = TRUE)
subject_review <- data1 %>%
unnest_tokens(word, review_body) %>%
anti_join(stop_words)
my_stopwords_list <- data_frame(word = c(as.character(1:10)))
subject_review <- subject_review %>%
anti_join(my_stopwords_list)
title_word_pair_list <- subject_review %>%
pairwise_count(word, ID, sort = TRUE, upper = FALSE)
set.seed(1234)
title_word_pair_list %>%
filter(n >= 1000) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour =
"cyan4") +
geom_node_point(size = 5) +
geom_node_text(aes(label = name), repel = TRUE,
point.padding = unit(0.2, "lines")) +
ggtitle('Word network in TripAdvisor reviews')
theme_void()
trigrams_review <- data1 %>%
unnest_tokens(trigram, review_body, token = "ngrams", n = 3)
separated_trigrams <- trigrams_review %>%
separate(trigram, c("word1", "word2", "word3"), sep = " ")
filtered_trigrams <- separated_trigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!word3 %in% stop_words$word)
count_trigram <- filtered_trigrams %>%
count(word1, word2, word3, sort = TRUE)
united_trigrams <- filtered_trigrams %>%
unite(trigram, word1, word2, word3, sep = " ")
united_trigrams %>%
count(trigram, sort = TRUE)
per_month_reviews <- data1 %>%
group_by(month) %>%
summarize(month_total = n())
monthly_word_counts <- review_words %>%
filter(word_total >= 1000) %>%
count(word, month) %>%
complete(word, month, fill = list(n = 0)) %>%
inner_join(reviews_per_month, by = "month") %>%
mutate(percent = n / month_total) %>%
mutate(year = year(month) + yday(month) / 365)
per_month_reviews <- data1 %>%
group_by(month) %>%
summarize(month_total = n())
monthly_word_counts <- review_words %>%
filter(word_total >= 1000) %>%
count(word, month) %>%
complete(word, month, fill = list(n = 0)) %>%
inner_join(per_month_reviews, by = "month") %>%
mutate(percent = n / month_total) %>%
mutate(year = year(month) + yday(month) / 365)
mod_1 <- ~ glm(cbind(n, month_total - n) ~ year, ., family = "binomial")
slopes_mod <- monthly_word_counts %>%
nest(data = -word) %>%
mutate(model = map(data, mod_1),
model = map(model,tidy)) %>%
unnest(model) %>%
filter(term == 'year') %>%
arrange(desc(estimate))
slopes_mod <- monthly_word_counts %>%
nest(data = -word) %>%
mutate(model = map(data, mod),
model = map(model,tidy)) %>%
unnest(model) %>%
filter(term == 'year') %>%
arrange(desc(estimate))
slopes_mod <- monthly_word_counts %>%
nest(data = -word) %>%
mutate(model = map(data, mod_1),
model = map(model,tidy)) %>%
unnest(model) %>%
filter(term == 'year') %>%
arrange(desc(estimate))
slopes_mod %>%
head(9) %>%
inner_join(monthly_word_counts, by = "word") %>%
mutate(word = reorder(word, -estimate)) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(show.legend = FALSE) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~ word, scales = "free_y") +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this word",
title = "9 fastest growing words in TripAdvisor reviews",
subtitle = "Judged by growth rate over 15 years")
per_month_reviews <- data1 %>%
group_by(month) %>%
summarize(month_total = n())
monthly_word_counts <- review_words %>%
filter(word_total >= 1000) %>%
count(word, month) %>%
complete(word, month, fill = list(n = 0)) %>%
inner_join(per_month_reviews, by = "month") %>%
mutate(percent = n / month_total) %>%
mutate(year = year(month) + yday(month) / 365)
mod_1 <- ~ glm(cbind(n, month_total - n) ~ year, ., family = "binomial")
slopes_mod <- monthly_word_counts %>%
nest(data = -word) %>%
mutate(model = map(data, mod_1),
model = map(model,tidy)) %>%
unnest(model) %>%
filter(term == 'year') %>%
arrange(desc(estimate))
slopes_mod %>%
head(9) %>%
inner_join(monthly_word_counts, by = "word") %>%
mutate(word = reorder(word, -estimate)) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(show.legend = FALSE) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~ word, scales = "free_y") +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this word",
title = "9 fastest growing words in TripAdvisor reviews",
subtitle = "Judged by growth rate over 15 years")
slopes_mod <- monthly_word_counts %>%
nest(data = -word) %>%
mutate(model = map(data, mod_1),
model = map(model,tidy)) %>%
unnest(model) %>%
filter(term == 'year') %>%
arrange(desc(estimate))
slopes_mod %>%
head(9) %>%
inner_join(monthly_word_counts, by = "word") %>%
mutate(word = reorder(word, -estimate)) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(show.legend = FALSE) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~ word, scales = "free_y") +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of reviews that contain this word",
title = "Top Nine fastest growing words in TripAdvisor reviews",
subtitle = "Analyzed by growth rate over 15 years")
slopes_mod %>%
tail(9) %>%
inner_join(monthly_word_counts, by = "word") %>%
mutate(word = reorder(word, estimate)) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(show.legend = FALSE) +
scale_y_continuous(labels = percent_format()) +
facet_wrap(~ word, scales = "free_y") +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of reviews containing this term",
title = "Top Nine fastest shrinking words in TripAdvisor reviews",
subtitle = "Analyzed by growth rate over 15 years")
monthly_word_counts %>%
filter(word %in% c("service", "food")) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(size = 1, alpha = .8) +
scale_y_continuous(labels = percent_format()) +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this term", title = "service vs food in terms of reviewers interest")
monthly_word_counts %>%
filter(word %in% c("service", "food")) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(size = 1, alpha = .5) +
scale_y_continuous(labels = percent_format()) +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this term", title = "service vs food in terms of reviewers interest")
monthly_word_counts %>%
filter(word %in% c("service", "food")) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(size = 1, alpha = .9) +
scale_y_continuous(labels = percent_format()) +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this term", title = "service vs food in terms of reviewers interest")
monthly_word_counts %>%
filter(word %in% c("service", "food")) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(size = 0.5, alpha = .9) +
scale_y_continuous(labels = percent_format()) +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this term", title = "service vs food in terms of reviewers interest")
monthly_word_counts %>%
filter(word %in% c("expensive", "beautiful")) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(size = 0.5, alpha = .9) +
scale_y_continuous(labels = percent_format()) +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this term", title = "service vs food in terms of reviewers interest")
monthly_word_counts %>%
filter(word %in% c("recommend", "beautiful")) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(size = 0.5, alpha = .9) +
scale_y_continuous(labels = percent_format()) +
expand_limits(y = 0) +
labs(x = "Year",
y = "Percentage of reviews containing this term", title = "service vs food in terms of reviewers interest")
monthly_word_counts %>%
filter(word %in% c("recommend", "beautiful")) %>%
ggplot(aes(month, n / month_total, color = word)) +
geom_line(size = 0.5, alpha = .9) +
scale_y_continuous(labels = percent_format()) +
expand_limits(y = 0) +
labs(x = "Year",
y = "% of reviews containing this term", title = "recommend vs beautiful in terms of reviewers interest")
reviews <- data1 %>%
filter(!is.na(review_body)) %>%
select(ID, review_body) %>%
group_by(row_number()) %>%
ungroup()
reviews_tidy <- reviews %>%
unnest_tokens(word, review_body)
reviews_tidy <- reviews_tidy %>%
anti_join(stop_words)
reviews_tidy
word_counts_bing <- reviews_tidy %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
word_counts_bing %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free") +
labs(y = "Contribution to sentiment", x = NULL) +
coord_flip() +
ggtitle('positive and negative snetiment contribution form words in the reviews')
reviews <- data1 %>%
filter(!is.na(review_body)) %>%
select(ID, review_body) %>%
group_by(row_number()) %>%
ungroup()
reviews_tidy <- reviews %>%
unnest_tokens(word, review_body)
reviews_tidy <- reviews_tidy %>%
anti_join(stop_words)
#reviews_tidy
word_counts_bing <- reviews_tidy %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
word_counts_bing %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free") +
labs(y = "Contribution to sentiment", x = NULL) +
coord_flip() +
ggtitle('positive and negative snetiment contribution form words in the reviews')
reviews <- data1 %>%
filter(!is.na(review_body)) %>%
select(ID, review_body) %>%
group_by(row_number()) %>%
ungroup()
reviews_tidy <- reviews %>%
unnest_tokens(word, review_body)
reviews_tidy <- reviews_tidy %>%
anti_join(stop_words)
#reviews_tidy
word_counts_bing <- reviews_tidy %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
word_counts_bing %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free") +
labs(y = "Contribution to sentiment", x = NULL) +
coord_flip() +
ggtitle('positive and negative sentiment contribution form words in the reviews')
reviews <- data1 %>%
filter(!is.na(review_body)) %>%
select(ID, review_body) %>%
group_by(row_number()) %>%
ungroup()
reviews_tidy <- reviews %>%
unnest_tokens(word, review_body)
reviews_tidy <- reviews_tidy %>%
anti_join(stop_words)
#reviews_tidy
word_counts_bing <- reviews_tidy %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
word_counts_bing %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free") +
labs(y = "Contribution to sentiment", x = NULL) +
coord_flip() +
ggtitle('positive and negative sentiment contribution form words in the reviews')
afinn_contributions <- tidy_reviews %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
group_by(word) %>%
summarize(occurences = n(),
contribution = sum(value))
afinn_contributions <- reviews_tidy %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
group_by(word) %>%
summarize(occurences = n(),
contribution = sum(value))
afinn_contributions %>%
top_n(25, abs(contribution)) %>%
mutate(word = reorder(word, contribution)) %>%
ggplot(aes(word, contribution, fill = contribution > 0)) +
ggtitle('Words with the greatest contributions to positive/negative
sentiment in reviews') +
geom_col(show.legend = FALSE) +
coord_flip()
separated_bigrams %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
AFINN <- get_sentiments("afinn")
words_with_not <- bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE) %>%
ungroup()
words_with_not
words_with_not %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, n * value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by \"not\"") +
ylab("Sentiment value * number of occurrences") +
ggtitle('The 20 words preceded by "not" that had the greatest contribution to
sentiment scores, positive or negative direction') +
coord_flip()
words_with_not %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, n * value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words with \"not\" in front") +
ylab("Sentiment value * number of occurrences") +
ggtitle('Top 20 words with not that contributed either in positive/negative direction') +
coord_flip()
words_with_not %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, n * value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words with \"not\" in front") +
ylab("Sentiment value * number of occurrences") +
ggtitle('Top 20 words with \"not\" that contributed either in positive/negative direction') +
coord_flip()
negative_words <- c("not", "no", "never", "without")
words_negated <- separated_bigrams %>%
filter(word1 %in% negative_words) %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word1, word2, value, sort = TRUE) %>%
ungroup()
words_negated %>%
mutate(contribution = n * value,
word2 = reorder(paste(word2, word1, sep = "__"), contribution)) %>%
group_by(word1) %>%
top_n(12, abs(contribution)) %>%
ggplot(aes(word2, contribution, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~ word1, scales = "free") +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
xlab("Words preceded by negative term") +
ylab("Sentiment value * Number of occurrences") +
ggtitle('Common words with positive/negative sentiment associate with negation words like : No,Not,Never,Without"') +
coord_flip()
messages_sentiment <- tidy_reviews %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
group_by(ID) %>%
summarize(sentiment = mean(value),
words = n()) %>%
ungroup() %>%
filter(words >= 5)
messages_sentiment <- reviews_tidy %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
group_by(ID) %>%
summarize(sentiment = mean(value),
words = n()) %>%
ungroup() %>%
filter(words >= 5)
messages_sentiment %>%
arrange(desc(sentiment))
data1[ which(data1$ID==2363), ]$review_body[1]
data1[ which(data1$ID==2578), ]$review_body[1]
messages_sentiment %>%
arrange(sentiment)
data1[ which(data1$ID==3748), ]$review_body[1]
data1[ which(data1$ID==317), ]$review_body[1]
data1[ which(data1$ID==7135), ]$review_body[1]
install.packages("audio")
#Check which audio driver is set
current.audio.driver()
#if there is no driver set, view what drivers are available
audio.drivers()
#Check which audio driver is set
#current.audio.driver()
#Check which audio driver is set
current.audio.driver()
binom_pmf <- function(x, k, p){
if (x == 0){
return((1 - p)^k)
} else{
return((((k-x+1)*p) / (x*(1-p))) * binom_pmf(x-1,k,p))
}
}
binom_pmf(1:10, 10, 0.4)
dbinom(1:10,10,p=0.4)
# code here - insert as many R chunks of code as needed
Lorenz <- function(Time, State, Pars){
with(as.list(c(State, Pars)), {
dx <- a*x + y*z
dy <- b*(y - z)
dz <- -x*y + c*y - z
return(list(c(dx,dy,dz)))
})
}
times <- seq(0,100,0.001)
pars <- c(a = -8/3, b = -10, c = 28)
state <- c(x = 1, y = 1, z = 1)
out <- ode(func = Lorenz, y = state, parms = pars, times = times)
plot(out[, "x"], out[, "y"], pch = ".")
install.packages("deSolve")
# code here - insert as many R chunks of code as needed
Lorenz <- function(Time, State, Pars){
with(as.list(c(State, Pars)), {
dx <- a*x + y*z
dy <- b*(y - z)
dz <- -x*y + c*y - z
return(list(c(dx,dy,dz)))
})
}
times <- seq(0,100,0.001)
pars <- c(a = -8/3, b = -10, c = 28)
state <- c(x = 1, y = 1, z = 1)
out <- ode(func = Lorenz, y = state, parms = pars, times = times)
# code here - insert as many R chunks of code as needed
Lorenz <- function(Time, State, Pars){
with(as.list(c(State, Pars)), {
dx <- a*x + y*z
dy <- b*(y - z)
dz <- -x*y + c*y - z
return(list(c(dx,dy,dz)))
})
}
times <- seq(0,100,0.001)
pars <- c(a = -8/3, b = -10, c = 28)
state <- c(x = 1, y = 1, z = 1)
out <- ode(func = Lorenz, y = state, parms = pars, times = times)
library(dplyr)
library(readr)
library(lubridate)
library(ggplot2)
library(tidytext)
